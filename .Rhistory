predictions$y <- round(predictions$y,4)
predictions$x[1]
filter(predictions, y == sensitiveLocations$latitude[1])
filter(predictions, y == sensitiveLocations$latitude[2])
filter(predictions, y == sensitiveLocations$latitude[2] && sensitiveLocations$longitude[2])
filter(predictions, y == sensitiveLocations$latitude[2] && x == sensitiveLocations$longitude[2])
filter(predictions, y == sensitiveLocations$latitude[3] && x == sensitiveLocations$longitude[3])
filter(predictions, y == sensitiveLocations$latitude[3] && x == sensitiveLocations$longitude[3])
sensitiveLocations$longitude[3]
filter(predictions, y == sensitiveLocations$latitude[8] && x == sensitiveLocations$longitude[8])
filter(predictions, y == sensitiveLocations$latitude[8])
predictions
getOption("max.print")
filter(predictions, x == sensitiveLocations$longitude[1])
filter(predictions, x == sensitiveLocations$longitude[2])
filter(predictions, x == sensitiveLocations$longitude[3])
filter(predictions, x == sensitiveLocations$longitude[4])
filter(predictions, x == -118.1710)
senst
sensitiveLocations
devtools::document()
runApp()
runApp()
PAhourly <- PAhourly(newCleanPA(read,csv("pm25_april.csv")),TRUE)
getwd()
library(PurpleAirCEHAT)
PAhourly <- PAhourly(newCleanPA(read,csv("pm25_april.csv")),TRUE)
PAhourly <- PAhourly(newCleanPA(read.csv("pm25_april.csv")),TRUE)
PAhourly <- hourlyPA(newCleanPA(read.csv("pm25_april.csv")),TRUE)
Sensor <- PAhourly[PAhourly$names == 'CEHAT 5',]
overEPA <- PurpleAirCEHAT::overEPA(Sensor)
overEPA
numDays <- length(unique(lubridate::mday(Sensor$timestamp)))
ourData <- PurpleAirCEHAT::overEPA_hist(overEPA,numDays)
ourData
if(overEPA$timestamp > 0) {
epahist <- ggplot(ourData, aes(x=day,y=freq)) +
geom_bar(position="dodge", stat="identity") +
ggtitle(paste("Days over EPA threshold for",input$sensor,"in South Gate",sep=" "))}
if(overEPA$timestamp > 0) {
epahist <- ggplot(ourData, aes(x=day,y=freq)) +
geom_bar(position="dodge", stat="identity") +
ggtitle(paste("Days over EPA threshold for","sensor 5","in South Gate",sep=" "))}
ggplotly(epahist)
runApp()
summarySG <- summarySG(PAhourly)
names(summarySG)[2] <- "PM2.5"
overEPA <- PurpleAirCEHAT::overEPA(summarySG)
numDays <- length(unique(lubridate::mday(summarySG$timestamp)))
ourData <- PurpleAirCEHAT::overEPA_hist(overEPA,numDays)
if(overEPA$timestamp > 0) {
epahist <- ggplot(ourData, aes(x=day,y=freq)) +
geom_bar(position="dodge", stat="identity") +
ggtitle("Days over EPA threshold in South Gate")}
else{ epahist <- ggtitle("No days are over the EPA threshold for this month.") }
ggplotly(epahist)
if(overEPA$timestamp > 0) {
epahist <- ggplot(ourData, aes(x=day,y=freq)) +
geom_bar(position="dodge", stat="identity") +
ggtitle("Days over EPA threshold in South Gate")}
else{
epahist <- ggtitle("No days are over the EPA threshold for this month.") }
epahist <- ggplot(ourData, aes(x=day,y=freq)) +
geom_bar(position="dodge", stat="identity") +
ggtitle("Days over EPA threshold in South Gate")}
epahist <- ggplot(ourData, aes(x=day,y=freq)) +
geom_bar(position="dodge", stat="identity") +
ggtitle("Days over EPA threshold in South Gate")
ggplotly(epahist)
PAhourly
Sensor <- PAhourly[PAhourly$names == input$sensor,]
Sensor <- PAhourly[PAhourly$names == "CEHAT 5",]
Sesnor
Sensor
numDays <- length(unique(lubridate::mday(Sensor$timestamp)))
numDays
overEPA <- PurpleAirCEHAT::overEPA(Sensor)
overEPA
ourData <- PurpleAirCEHAT::overEPA_hist(overEPA,numDays)
ourData
overEPA
overEPA <- PurpleAirCEHAT::overEPA(Sensor)
overEPA
ourData <- PurpleAirCEHAT::overEPA_hist(overEPA,numDays)
ourData
devtools:document()
devtools::document()
runApp()
runApp()
sensitiveLocations <- data.frame(places = c("Tweedy Elementary", ,"Bryson Elementary","South Gate Middle","San Miguel School",
"Stanford Elementary","San Gabriel Elementary","South East High School",
"Liberty Boulevard Elementary","Stanford Avenue Park", "South Gate Park","Circle Park","Hollydale Regional Park",
"El Paseo Shopping Center","Azalea Shopping Center","Guadalupano MC","Tweedy MC", "Sanchez MC","Clinica Maria MC",
"Loyola MC", "United MC","South Gate SC",
"South Gate Senior Villas SC","South Gate Park SC"),
latitude = c(33.9435,33.9455,33.9540,33.9445,33.9505,33.9565,33.9435,33.962,33.951,33.946,
33.939,33.9325,33.9515,33.9515,33.9420,33.9435,33.9625,33.9435,33.9420,33.9325,33.9435,33.941),
longitude = c(-118.1890,-118.1950,-1128.206,-118.2045,-118.2270,-118.2083,-118.2255,-118.223,
-118.231,-118.1895,-118.1695,-118.194,-118.1695,-118.1840,-118.2100,-118.2025,
-118.2065,-118.1990,-118.184,-118.182,-118.209,-118.2),
PMPred = rep(0,22))
sensitiveLocations <- data.frame(places = c("Tweedy Elementary", "Bryson Elementary","South Gate Middle","San Miguel School",
"Stanford Elementary","San Gabriel Elementary","South East High School",
"Liberty Boulevard Elementary","Stanford Avenue Park", "South Gate Park","Circle Park","Hollydale Regional Park",
"El Paseo Shopping Center","Azalea Shopping Center","Guadalupano MC","Tweedy MC", "Sanchez MC","Clinica Maria MC",
"Loyola MC", "United MC","South Gate SC",
"South Gate Senior Villas SC","South Gate Park SC"),
latitude = c(33.9435,33.9455,33.9540,33.9445,33.9505,33.9565,33.9435,33.962,33.951,33.946,
33.939,33.9325,33.9515,33.9515,33.9420,33.9435,33.9625,33.9435,33.9420,33.9325,33.9435,33.941),
longitude = c(-118.1890,-118.1950,-1128.206,-118.2045,-118.2270,-118.2083,-118.2255,-118.223,
-118.231,-118.1895,-118.1695,-118.194,-118.1695,-118.1840,-118.2100,-118.2025,
-118.2065,-118.1990,-118.184,-118.182,-118.209,-118.2),
PMPred = rep(0,22))
sensitiveLocations <- data.frame(places = c("Tweedy Elementary", "Bryson Elementary","South Gate Middle","San Miguel School",
"Stanford Elementary","San Gabriel Elementary","South East High School",
"Liberty Boulevard Elementary","Stanford Avenue Park", "South Gate Park","Circle Park","Hollydale Regional Park",
"El Paseo Shopping Center","Azalea Shopping Center","Guadalupano MC","Tweedy MC", "Sanchez MC","Clinica Maria MC",
"Loyola MC", "United MC","South Gate SC",
"South Gate Senior Villas SC","South Gate Park SC"),
latitude = c(33.9435,33.9455,33.9540,33.9445,33.9505,33.9565,33.9435,33.962,33.951,33.946,
33.939,33.9325,33.9515,33.9515,33.9420,33.9435,33.9625,33.9435,33.9420,33.9325,33.9435,33.941),
longitude = c(-118.1890,-118.1950,-1128.206,-118.2045,-118.2270,-118.2083,-118.2255,-118.223,
-118.231,-118.1895,-118.1695,-118.194,-118.1695,-118.1840,-118.2100,-118.2025,
-118.2065,-118.1990,-118.184,-118.182,-118.209,-118.2),
PMPred = rep(0,23))
sensitiveLocations <- data.frame(places = c("Tweedy Elementary", "Bryson Elementary","South Gate Middle","San Miguel School",
"Stanford Elementary","San Gabriel Elementary","South East High School",
"Liberty Boulevard Elementary","Stanford Avenue Park", "South Gate Park","Circle Park","Hollydale Regional Park",
"El Paseo Shopping Center","Azalea Shopping Center","Guadalupano MC","Tweedy MC", "Sanchez MC","Clinica Maria MC",
"Loyola MC", "United MC","South Gate SC",
"South Gate Senior Villas SC","South Gate Park SC"),
latitude = c(33.9435,33.9455,33.9540,33.9445,33.9505,33.9565,33.9435,33.962,33.951,33.946,
33.939,33.9325,33.9515,33.9515,33.9420,33.9435,33.9625,33.9435,33.9420,33.9325,33.9435,33.941),
longitude = c(-118.1890,-118.1950,-1128.206,-118.2045,-118.2270,-118.2083,-118.2255,-118.223,
-118.231,-118.1895,-118.1695,-118.194,-118.1695,-118.1840,-118.2100,-118.2025,
-118.2065,-118.1990,-118.184,-118.182,-118.209,-118.2),
PMPred = rep(0,22))
sensitiveLocations <- data.frame(places = c("Tweedy Elementary", "Bryson Elementary","South Gate Middle","San Miguel School",
"Stanford Elementary","San Gabriel Elementary","South East High School",
"Liberty Boulevard Elementary","Stanford Avenue Park", "South Gate Park","Circle Park","Hollydale Regional Park",
"El Paseo Shopping Center","Azalea Shopping Center","Guadalupano MC","Tweedy MC","Clinica Maria MC",
"Loyola MC", "United MC","South Gate SC",
"South Gate Senior Villas SC","South Gate Park SC"),
latitude = c(33.9435,33.9455,33.9540,33.9445,33.9505,33.9565,33.9435,33.962,33.951,33.946,
33.939,33.9325,33.951,33.953,
33.9420,33.9435,33.9625,33.9435,33.9420,33.9325,
33.9435,33.941),
longitude = c(-118.1890,-118.1950,-1128.206,-118.2045,-118.2270,-118.2083,-118.2255,-118.223,
-118.231,-118.1895,-118.1695,-118.194,-118.1695,-118.1860,
-118.2100,-118.2025,
-118.2065,-118.1990,-118.184,-118.182,-118.209,-118.2),
PMPred = rep(0,22))
sensitiveLocations
predictiosn
predictions
predictions$x <- round(predictions$x,4)
predictions$y <- round(predictions$y,4)
pm <- filter(predictions,y == sensitiveLocations$latitude[1] &&
x == sensitiveLocations$longiitude[1])
pm
filter(predictions,y == sensitiveLocations$latitude[1])
filter(predictions,y == sensitiveLocations$longitude[1])
sensitiveLocations
pm <- filter(predictions,y == sensitiveLocations$latitude[1] &&
x == sensitiveLocations$longitude[1])
pm
filter(predictions,
x == sensitiveLocations$longitude[1])
filter(predictions,y == sensitiveLocations$latitude[1] &
x == sensitiveLocations$longitude[1])
sensitiveLocations <- data.frame(places = c("Tweedy Elementary", "Bryson Elementary","South Gate Middle","San Miguel School",
"Stanford Elementary","San Gabriel Elementary","South East High School",
"Liberty Boulevard Elementary","Stanford Avenue Park", "South Gate Park","Circle Park","Hollydale Regional Park",
"El Paseo Shopping Center","Azalea Shopping Center","Guadalupano MC","Tweedy MC","Clinica Maria MC",
"Loyola MC", "United MC","South Gate SC",
"South Gate Senior Villas SC","South Gate Park SC"),
latitude = c(33.9435,33.9455,33.9540,33.9445,33.9505,33.9565,33.9435,33.962,33.951,33.946,
33.939,33.9325,33.951,33.953,
33.9420,33.9435,33.9625,33.9435,33.9420,33.9325,
33.9435,33.941),
longitude = c(-118.1890,-118.1950,-118.206,-118.2045,-118.2270,-118.2083,-118.2255,-118.223,
-118.231,-118.1895,-118.1695,-118.194,-118.1695,-118.1860,
-118.2100,-118.2025,
-118.2065,-118.1990,-118.184,-118.182,-118.209,-118.2),
PMPred = rep(0,22))
predictions<- as.data.frame(krigePA(data,time))
predictions$x <- round(predictions$x,4)
predictions$y <- round(predictions$y,4)
for (place in (1:length(sensitiveLocations$places))){
pm <- filter(predictions,y == sensitiveLocations$latitude[place] &&
x == sensitiveLocations$longitude[place])
sensitiveLocations$PMPred <- pm$var1.pred
}
sensitiveLocations <- data.frame(places = c("Tweedy Elementary", "Bryson Elementary","South Gate Middle","San Miguel School",
"Stanford Elementary","San Gabriel Elementary","South East High School",
"Liberty Boulevard Elementary","Stanford Avenue Park", "South Gate Park","Circle Park","Hollydale Regional Park",
"El Paseo Shopping Center","Azalea Shopping Center","Guadalupano MC","Tweedy MC","Clinica Maria MC",
"Loyola MC", "United MC","South Gate SC",
"South Gate Senior Villas SC","South Gate Park SC"),
latitude = c(33.9435,33.9455,33.9540,33.9445,33.9505,33.9565,33.9435,33.962,33.951,33.946,
33.939,33.9325,33.951,33.953,
33.9420,33.9435,33.9625,33.9435,33.9420,33.9325,
33.9435,33.941),
longitude = c(-118.1890,-118.1950,-118.206,-118.2045,-118.2270,-118.2083,-118.2255,-118.223,
-118.231,-118.1895,-118.1695,-118.194,-118.1695,-118.1860,
-118.2100,-118.2025,
-118.2065,-118.1990,-118.184,-118.182,-118.209,-118.2),
PMPred = rep(0,22))
predictions
predictions$x <- round(predictions$x,4)
predictions$y <- round(predictions$y,4)
for (place in (1:length(sensitiveLocations$places))){
pm <- filter(predictions,y == sensitiveLocations$latitude[place] &&
x == sensitiveLocations$longitude[place])
sensitiveLocations$PMPred <- pm$var1.pred
}
predictions$x <- round(predictions$x,4)
predictions$y <- round(predictions$y,4)
for (place in (1:length(sensitiveLocations$places))){
pm <- filter(predictions,y == sensitiveLocations$latitude[place] &
x == sensitiveLocations$longitude[place])
sensitiveLocations$PMPred <- pm$var1.pred
}
for (place in (1:length(sensitiveLocations$places))){
pm <- filter(predictions,y == sensitiveLocations$latitude[place] &
x == sensitiveLocations$longitude[place])
sensitiveLocations$PMPred[place] <- pm$var1.pred
}
sensitiveLocations$PMPred[1]
sensitiveLocations
for (place in (1:length(sensitiveLocations$places))){
pm <- filter(predictions,y == sensitiveLocations$latitude[place] &
x == sensitiveLocations$longitude[place])
if (pm$x == 0){
sensitiveLocations$PMPred[place] <- 0
}
else{
sensitiveLocations$PMPred[place] <- pm$var1.pred}
}
if (pm$x != 0){
sensitiveLocations$PMPred[place] <- pm$var1.pred
}
pm <- filter(predictions,y == sensitiveLocations$latitude[1] &
x == sensitiveLocations$longitude[1])
pm
pm <- filter(predictions,y == sensitiveLocations$latitude[6] &
x == sensitiveLocations$longitude[6])
pm
sensitiveLocations <- data.frame(places = c("Tweedy Elementary", "Bryson Elementary","South Gate Middle","San Miguel School",
"Stanford Elementary","San Gabriel Elementary","South East High School",
"Liberty Boulevard Elementary","Stanford Avenue Park", "South Gate Park","Circle Park","Hollydale Regional Park",
"El Paseo Shopping Center","Azalea Shopping Center","Guadalupano MC","Tweedy MC","Clinica Maria MC",
"Loyola MC", "United MC","South Gate SC",
"South Gate Senior Villas SC","South Gate Park SC"),
latitude = c(33.9435,33.9455,33.9540,33.9445,33.9505,33.9565,33.9435,33.962,33.951,33.946,
33.939,33.9325,33.951,33.953,33.9420,33.9435,33.9625,33.9435,33.9420,33.9325,
33.9435,33.941),
longitude = c(-118.1890,-118.1950,-118.206,-118.2045,-118.2270,-118.2085,-118.2255,-118.223,
-118.231,-118.1895,-118.1695,-118.194,-118.1695,-118.1860,
-118.2100,-118.2025,
-118.2065,-118.1990,-118.184,-118.182,-118.209,-118.2),
PMPred = rep(0,22))
predictions$x <- round(predictions$x,4)
predictions$y <- round(predictions$y,4)
for (place in (1:length(sensitiveLocations$places))){
pm <- filter(predictions,y == sensitiveLocations$latitude[place] &
x == sensitiveLocations$longitude[place])
if (pm$x != 0){
sensitiveLocations$PMPred[place] <- pm$var1.pred
}
}
for (place in (1:length(sensitiveLocations$places))){
pm <- filter(predictions,y == sensitiveLocations$latitude[place] &
x == sensitiveLocations$longitude[place])
if (length(pm$x) != 0){
sensitiveLocations$PMPred[place] <- pm$var1.pred
}
}
sensitiveLocations
devtools::document()
hey <- "hillary"
startsWith(hey,"h")
runApp()
runApp()
PAhourly
PAhourly <- PAhourly %>% dplyr::filter(PAhourly$timestamp == "2021-04-01 04:00:00"+ lubridate::hours("04:00:00"))
PAhourly <- PAhourly %>% dplyr::filter(PAhourly$timestamp == "2021-04-01 04:00:00")
sensitiveLocations <- PurpleAirCEHAT::sensitiveLocations(PAhourly,"2021-04-01 04:00:00")
schools <- filter(sensitiveLocations, startsWith(places,"Sch") )
schools
sg.city <- PurpleAirCEHAT::southgate()
k <- ggplot(schools, aes(longitude, latitude,fill=`PMPred`)) +
geom_path(data = sg.city, aes(long, lat, group=id), color='black')+
geom_point(aes(size= .9, color=black)) +
xlim(-118.2325,-118.155) +
ylim(33.91029, 33.96837)+
guides(size=FALSE) +
ggtitle("Using Kriging to Predict PM2.5 near schools")+
geom_text(aes(label=places), check_overlap = F, show.legend = F, size = 3, vjust = 2)+
theme_minimal()
ggplotly(k)
k <- ggplot(schools, aes(longitude, latitude,fill=PMPred)) +
geom_path(data = sg.city, aes(long, lat, group=id), color='black')+
geom_point(aes(size= .9, color=black)) +
xlim(-118.2325,-118.155) +
ylim(33.91029, 33.96837)+
guides(size=FALSE) +
ggtitle("Using Kriging to Predict PM2.5 near schools")+
geom_text(aes(label=places), check_overlap = F, show.legend = F, size = 3, vjust = 2)+
theme_minimal()
ggplotly(k)
k <- ggplot(schools, aes(longitude, latitude,fill= schools$PMPred)) +
geom_path(data = sg.city, aes(long, lat, group=id), color='black')+
geom_point(aes(size= .9, color=black)) +
xlim(-118.2325,-118.155) +
ylim(33.91029, 33.96837)+
guides(size=FALSE) +
ggtitle("Using Kriging to Predict PM2.5 near schools")+
geom_text(aes(label=places), check_overlap = F, show.legend = F, size = 3, vjust = 2)+
theme_minimal()
ggplotly(k)
schools$PMPred
rlang::last_error()
PM25 <- schools$PMPred
k <- ggplot(schools, aes(longitude, latitude,fill= schools$PM25)) +
geom_path(data = sg.city, aes(long, lat, group=id), color='black')+
geom_point(aes(size= .9, color=black)) +
xlim(-118.2325,-118.155) +
ylim(33.91029, 33.96837)+
guides(size=FALSE) +
ggtitle("Using Kriging to Predict PM2.5 near schools")+
geom_text(aes(label=places), check_overlap = F, show.legend = F, size = 3, vjust = 2)+
theme_minimal()
ggplotly(k)
k <- ggplot(schools, aes(longitude, latitude,fill= schools$PM25)) +
geom_path(data = sg.city, aes(long, lat, group=id), color='black')+
geom_point(aes(size= .9, color='black')) +
xlim(-118.2325,-118.155) +
ylim(33.91029, 33.96837)+
guides(size=FALSE) +
ggtitle("Using Kriging to Predict PM2.5 near schools")+
geom_text(aes(label=places), check_overlap = F, show.legend = F, size = 3, vjust = 2)+
theme_minimal()
ggplotly(k)
k <- ggplot(schools, aes(longitude, latitude,fill= schools$PM25)) +
geom_path(data = sg.city, aes(long, lat, group=id), color='black')+
geom_point(aes(size= .9)) +
xlim(-118.2325,-118.155) +
ylim(33.91029, 33.96837)+
guides(size=FALSE) +
ggtitle("Using Kriging to Predict PM2.5 near schools")+
geom_text(aes(label=places), check_overlap = F, show.legend = F, size = 3, vjust = 2)+
theme_minimal()
ggplotly(k)
names(schools)[4] <- 'PM25'
k <- ggplot(schools, aes(longitude, latitude,fill= PM25)) +
geom_path(data = sg.city, aes(long, lat, group=id), color='black')+
geom_point(aes(size= .9)) +
xlim(-118.2325,-118.155) +
ylim(33.91029, 33.96837)+
guides(size=FALSE) +
ggtitle("Using Kriging to Predict PM2.5 near schools")+
geom_text(aes(label=places), check_overlap = F, show.legend = F, size = 3, vjust = 2)+
theme_minimal()
ggplotly(k)
schools
k <- ggplot(schools, aes(longitude, latitude,fill= PM25)) +
geom_path(data = sg.city, aes(long, lat, group=id), color='black')
ggplotly(k)
k <- ggplot(schools, aes(schools,longitude, latitude,fill= PM25)) +
geom_path(data = sg.city, aes(long, lat, group=id), color='black')+
geom_point(aes(size= .9)) +
xlim(-118.2325,-118.155) +
ylim(33.91029, 33.96837)+
guides(size=FALSE) +
ggtitle("Using Kriging to Predict PM2.5 near schools")+
geom_text(aes(label=places), check_overlap = F, show.legend = F, size = 3, vjust = 2)+
theme_minimal()
ggplotly(k)
sg.city
devtools::document()
runApp()
schools
typeof(colnames(schools))
k <- ggplot(medicalCenters, aes(longitude, latitude)) +
geom_path(data = sg.city, aes(long, lat, group=id), color='black')+
geom_point(aes(size= .9)) +
xlim(-118.2325,-118.155) +
ylim(33.91029, 33.96837)+
guides(size=FALSE) +
ggtitle("Using Kriging to Predict PM2.5 near Medical Centers")+
geom_text(aes(label=places), check_overlap = F, show.legend = F, size = 3, vjust = 2)+
theme_minimal()
k <- ggplot(schools, aes(longitude, latitude)) +
geom_path(data = sg.city, aes(long, lat, group=id), color='black')+
geom_point(aes(size= .9)) +
xlim(-118.2325,-118.155) +
ylim(33.91029, 33.96837)+
guides(size=FALSE) +
ggtitle("Using Kriging to Predict PM2.5 near schools")+
geom_text(aes(label=places), check_overlap = F, show.legend = F, size = 3, vjust = 2)+
theme_minimal()
ggplotly(k)
k <- ggplot(schools, aes(longitude, latitude)) +
geom_path(data = sg.city, aes(long, lat, group=id), color='black')+
geom_point(aes(size= .9,fill=PM25)) +
xlim(-118.2325,-118.155) +
ylim(33.91029, 33.96837)+
guides(size=FALSE) +
ggtitle("Using Kriging to Predict PM2.5 near schools")+
geom_text(aes(label=places), check_overlap = F, show.legend = F, size = 3, vjust = 2)+
theme_minimal()
ggplotly(k)
runApp()
sensitiveLocations
PAhourly
sensitiveLocations <- PurpleAirCEHAT::sensitiveLocations(PAhourly,2021-04-01 01:00:00)
centers <- filter(sensitiveLocations, endsWith(places,"Park") | endsWith(places,"Center") )
sensitiveLocations <- PurpleAirCEHAT::sensitiveLocations(PAhourly,"2021-04-01 01:00:00")
centers <- filter(sensitiveLocations, endsWith(places,"Park") | endsWith(places,"Center") )
PAhourly
PurpleAirCEHAT::sensitiveLocations(PAhourly,'2021-04-01 01:00:00')
devtools::document()
runApp()
sensitiveLocations <- PurpleAirCEHAT::sensitiveLocations(PAhourly,'2021-04-01 01:00:00')
runApp('~/Desktop/app')
runApp('~/Desktop/app')
getwd()
devtools::document()
runApp('~/Desktop/app')
setwd('../app')
library(PurpleAirCEHAT)
runApp()
runApp()
PAhourly
sensitiveLocations <- PurpleAirCEHAT::sensitiveLocations(PAhourly,"2021-04-01 01:00:00")
PAhourly <- hourlyPA(newCleanPA(read.csv("pm25_april.csv")),TRUE)
PAhourly
PAhourly <- PAhourly %>% dplyr::filter(PAhourly()$timestamp == '2021-04-01 05:00:00')
PAhourly <- PAhourly %>% dplyr::filter(PAhourly$timestamp == '2021-04-01 05:00:00')
PAhourly
sensitiveLocations <- sensitiveLocations(PAhourly, '2021-04-01 05:00:00')
schools <- filter(sensitiveLocations, endsWith(places,"School") )
schools
getwd()
setwd('../analysis')
devtools::document()
runApp('~/Desktop/app')
runApp('~/Desktop/app')
getwd()
devtools::document()
runApp('~/Desktop/app')
runApp('~/Desktop/app')
runApp('~/Desktop/app')
runApp('~/Desktop/app')
runApp('~/Desktop/app')
PAhourly <- hourlyPA(newCleanPA(read.csv("pm25_april.csv")),TRUE)
PAhourly
avgSG <- PurpleAirCEHAT::summarySG(PAhourly)
overEPA <- PurpleAirCEHAT::overEPA(avgSG)
avgSG
ourData <- avgSG
rolling <- data.frame(rollingmean = rollmean(ourData$PM2.5, 24))
rolling[nrow(rolling)+ (length(ourData$PM2.5) - length(rolling$rollingmean)),] <- NA
Sensor <- dplyr::bind_cols(ourData, rolling)
rolling
rolling <- data.frame(rollingmean = rollmean(ourData$PM2.5, 24))
rolling
names(avgSG)[2] <- "PM2.5"
avgSG
rolling <- data.frame(rollingmean = rollmean(ourData$PM2.5, 24))
rolling
rolling <- data.frame(rollingmean = rollmean(avgSG$PM2.5, 24))
rolling
rolling[nrow(rolling)+ (length(avgSG$PM2.5) - length(rolling$rollingmean)),] <- NA
Sensor <- dplyr::bind_cols(avgSG, rolling)
Sensor
daysOver <- dplyr::filter(Sensor, rollingmean >= 35)
daysOver
length(daysOver$timestamp)
getwd()
devtools::document()
runApp('~/Desktop/app')
avgSG
overEPA <- PurpleAirCEHAT::overEPA(summarySG)
overEPA <- PurpleAirCEHAT::overEPA(avgSG)
numDays <- length(unique(lubridate::mday(avgSG$timestamp)))
ourData <- PurpleAirCEHAT::overEPA_hist(overEPA,numDays)
daysOver
devtools::document()
runApp('~/Desktop/app')
ourData
overEPA
runApp('~/Desktop/app')
runApp('~/Desktop/app')
overEPA
runApp('~/Desktop/app')
setwd('~/')
getwd()
runApp('Desktop/app')
setwd('Desktop')
setwd('app')
runApp()
rsconnect::showLogs()
runApp()
normalizePath("~/")
shiny::runApp()
install.packages("githubinstall")
runApp()
runApp()
Sys.getenv("GITHUB_PAT")
runApp()
